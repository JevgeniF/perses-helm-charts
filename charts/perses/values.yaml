# Default values for perses.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# -- Override name of the chart used in Kubernetes object names.
nameOverride: ""

# -- Override fully qualified app name
fullnameOverride: ""

## Image of Perses
##
image:
  # -- Perses image repository and name
  name: "persesdev/perses"

  # -- Overrides the image tag whose default is the chart appVersion.
  version: ""

  # -- Default image pull policy
  pullPolicy: IfNotPresent

additionalLabels: {}
  # app: perses

# -- Service account for Perses to use.
serviceAccount:
  # -- Specifies whether a service account should be created
  create: true
  # -- Annotations to add to the service account
  annotations: {}
  # -- The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# -- Expose the Perses service to be accessed from outside the cluster (LoadBalancer service).
# or access it from within the cluster (ClusterIP service). Set the service type and the port to serve it.
service:
  # -- Annotations to add to the service
  annotations: {}
  # -- Labels to add to the service
  labels: {}
  # -- Service Type (ClusterIP is internal to the cluster)
  type: "ClusterIP"  # This makes the service internal to the Kubernetes cluster
  # -- Service Port Name
  portName: http
  # -- Service Port
  port: 8080
  # -- Perses running port
  targetPort: 8080

# -- Statefulset Annotations
annotations: {}

# -- Number of pod replicas.
replicas: 1

# -- Log level for Perses to be configured in
# available options "panic", "error", "warning", "info", "debug", "trace"
logLevel: info

# -- Liveness probe configuration
livenessProbe:
  enabled: true
  initialDelaySeconds: 10
  periodSeconds: 60
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 5

# -- Readiness probe configuration
readinessProbe:
  enabled: true
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 5

# -- Additional volumes on the output StatefulSet definition.
volumes: []

# -- Additional VolumeMounts on the output StatefulSet definition.
volumeMounts: []

# -- Resource limits & requests.
resources: {}

# -- Perses configuration file
config:
  annotations: {}

  security:
    readOnly: false
    cookie:
      same_site: lax
      secure: true
    enableAuth: true
    authorization:
      guest_permissions:
        - actions:
          - "create"
          scopes: ["Project", "Datasource", "Dashboard", "Role", "RoleBinding"]
    authentication:
      access_token_ttl: "12h"
      providers:
        oidc:
          - slug_id: zitadel
            name: "Zitadel.cloud"
            client_id: "280096948902559246"
            client_secret: "cVxwKmrGmCTIiGOOKn2Z4hk507HZ0gBWWfcEU5ZJi1NnJ08bUpanL6vexJ5PxJkO"
            issuer: "https://entigo-dev-if3upz.zitadel.cloud"
            redirect_uri: "http://localhost:3000/api/auth/providers/oidc/zitadel/callback"
            scopes: [ "openid", "profile" ]

  schemas:
    panels_path: "/etc/perses/cue/schemas/panels"
    queries_path: "/etc/perses/cue/schemas/queries"
    datasources_path: "/etc/perses/cue/schemas/datasources"
    variables_path: "/etc/perses/cue/schemas/variables"
    interval: "5m"

  important_dashboards: []

  database:
    file:
      folder: /perses
      extension: json
    sql: {}

  provisioning:
    folders:
      - /etc/perses/provisioning
    interval: 10s

# -- Sidecar configuration that watches for ConfigMaps with the specified label/labelValue and loads them into Perses provisioning
sidecar:
  enabled: false
  image:
    repository: kiwigrid/k8s-sidecar
    tag: 1.28.0
  label: "perses.dev/resource"
  labelValue: "true"

# -- Persistence parameters
persistence:
  enabled: false
  accessModes:
    - ReadWriteOnce
  size: 8Gi
  securityContext:
    fsGroup: 2000
  labels: {}
  annotations: {}

# -- Configure the ingress resource that allows you to access Perses
ingress:
  enabled: false
  ingressClassName: ""
  annotations: {}
  hosts:
    - host: perses.local
      paths:
        - path: /
          pathType: Prefix
  tls: []

# -- Configure datasources (DEPRECATED in favor of sidecar provisioning)
datasources:
  []
  # - kind: GlobalDatasource
  #   metadata:
  #     name: PrometheusDemoBrowser
  #   spec:
  #     default: true
  #     plugin:
  #       kind: PrometheusDatasource
  #       spec:
  #         directUrl: https://prometheus.demo.do.prometheus.io


testFramework:
  enabled: true
  image:
    registry: ghcr.io
    repository: cloudoperators/greenhouse-extensions-integration-test
    tag: main
  imagePullPolicy: IfNotPresent
  